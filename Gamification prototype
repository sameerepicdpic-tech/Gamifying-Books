<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Fiction XP — Read & Earn</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      :root {
        --bg: #071226;
        --panel: #0f1b33;
        --muted: #97b0d6;
        --pri: #4aa3ff;
        --ok: #2fd38a;
        --card-border: #17243a;
      }
      * {
        box-sizing: border-box;
      }
      body {
        margin: 0;
        font-family: Inter, system-ui, Segoe UI, Roboto, Arial;
        background: linear-gradient(135deg, #071226, #07142a);
        color: #eaf3ff;
      }
      header {
        display: flex;
        gap: 12px;
        align-items: center;
        justify-content: space-between;
        padding: 14px 18px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.03);
        background: rgba(7, 18, 38, 0.35);
        backdrop-filter: blur(6px);
        position: sticky;
        top: 0;
        z-index: 5;
      }
      h1 {
        font-size: 18px;
        margin: 0;
        display: flex;
        gap: 8px;
        align-items: center;
      }
      .wrap {
        max-width: 1100px;
        margin: 22px auto;
        padding: 0 16px;
      }
      .grid {
        display: grid;
        gap: 16px;
      }
      @media (min-width: 960px) {
        .grid {
          grid-template-columns: 360px 1fr;
        }
      }
      .card {
        background: var(--panel);
        border: 1px solid var(--card-border);
        border-radius: 12px;
        padding: 14px;
      }
      .title {
        font-weight: 600;
        margin: 0 0 10px 0;
        font-size: 15px;
      }
      input,
      button,
      select,
      textarea {
        background: #0d1730;
        border: 1px solid #243a5a;
        color: #dbefff;
        border-radius: 8px;
        padding: 9px;
        font: inherit;
      }
      button {
        cursor: pointer;
      }
      button.pri {
        background: linear-gradient(135deg, #2f7dfd, #4aa3ff);
        border: none;
        color: white;
      }
      button.ghost {
        background: transparent;
        border: 1px solid rgba(255, 255, 255, 0.04);
      }
      .row {
        display: flex;
        gap: 10px;
        align-items: center;
      }
      .row.space {
        justify-content: space-between;
      }
      .muted {
        color: var(--muted);
        font-size: 13px;
      }
      .pill {
        display: inline-flex;
        gap: 6px;
        align-items: center;
        padding: 5px 8px;
        border-radius: 999px;
        background: #11263f;
        border: 1px solid rgba(255, 255, 255, 0.02);
        font-size: 12px;
      }
      .list {
        display: grid;
        gap: 10px;
        max-height: 460px;
        overflow: auto;
        padding-right: 6px;
      }
      .book {
        display: flex;
        gap: 10px;
        padding: 10px;
        border: 1px solid rgba(255, 255, 255, 0.03);
        border-radius: 10px;
        background: linear-gradient(
          180deg,
          rgba(12, 25, 47, 0.6),
          rgba(8, 18, 34, 0.4)
        );
      }
      .book img {
        width: 52px;
        height: 72px;
        object-fit: cover;
        border-radius: 6px;
        border: 1px solid rgba(255, 255, 255, 0.03);
        background: #07122a;
      }
      .grow {
        flex: 1;
      }
      .small {
        font-size: 12px;
      }
      .progress {
        height: 8px;
        border-radius: 6px;
        background: #12243f;
        overflow: hidden;
      }
      .progress > span {
        display: block;
        height: 100%;
        background: linear-gradient(90deg, #2f7dfd, #2fd38a);
      }
      #reader {
        height: 560px;
        overflow: auto;
        border: 1px solid rgba(255, 255, 255, 0.03);
        border-radius: 10px;
        padding: 18px;
        background: #07132a;
        line-height: 1.7;
      }
      #reader p {
        margin: 0 0 12px;
      }
      .badge {
        background: #091a33;
        border: 1px solid rgba(255, 255, 255, 0.02);
        border-radius: 8px;
        padding: 6px 9px;
        font-size: 12px;
      }
      .leader {
        display: grid;
        gap: 8px;
      }
      .leader .row {
        border: 1px solid rgba(255, 255, 255, 0.03);
        border-radius: 10px;
        padding: 8px;
        background: linear-gradient(
          180deg,
          rgba(8, 18, 34, 0.6),
          rgba(6, 14, 28, 0.4)
        );
      }
      .ok {
        color: var(--ok);
      }
      .warn {
        color: #ffb86b;
      }
      .link {
        color: #9fcfff;
        text-decoration: underline;
        cursor: pointer;
      }
      .sp {
        height: 10px;
      }
      .cap {
        text-transform: capitalize;
      }
      details summary {
        cursor: pointer;
      }
      footer {
        padding: 14px;
        text-align: center;
        color: var(--muted);
        font-size: 13px;
      }
    </style>

    <!-- Firebase (optional) -->
    <script
      defer
      src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js"
    ></script>
    <script
      defer
      src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore-compat.js"
    ></script>
  </head>
  <body>
    <header>
      <h1>📚 Books Gamified</h1>
      <div class="row">
        <input id="username" placeholder="Your name" style="width: 200px" />
        <button id="saveUser" class="pri">Save</button>
      </div>
    </header>

    <div class="wrap grid">
      <!-- LEFT: Library -->
      <section class="card" aria-labelledby="libTitle">
        <h2 id="libTitle" class="title">Library (Project Gutenberg)</h2>
        <div class="row">
          <input
            id="q"
            placeholder="Search (e.g., Austen, Sherlock)"
            style="flex: 1"
          />
          <button id="search" class="pri">Search</button>
          <button id="popular" class="ghost" title="Popular fiction">
            Popular
          </button>
        </div>
        <div class="sp"></div>
        <div id="library" class="list" aria-live="polite"></div>
        <div class="sp"></div>
        <div class="muted small">
          Source: Gutendex (Project Gutenberg). Only reading inside this site
          grants points. Works offline/local for the leaderboard.
        </div>
      </section>

      <!-- RIGHT: Reader + Gamification -->
      <section class="card" aria-labelledby="readerTitle">
        <h2 id="readerTitle" class="title">Reader & Gamification</h2>
        <div class="row space">
          <div class="row" id="bookMeta">
            <span class="badge">No book loaded</span>
          </div>
          <div class="row">
            <span class="pill">Progress: <span id="progPct">0</span>%</span>
            <span class="pill">This book: <span id="bookPts">0</span> pts</span>
          </div>
        </div>

        <div id="reader" aria-live="polite">
          <p class="muted">
            Select a book on the left to start reading. Points are awarded once
            you reach 95% reading inside this page.
          </p>
        </div>

        <div class="sp"></div>
        <div class="row space">
          <div class="row">
            <span class="pill">Total Points: <b id="totalPts">0</b></span>
            <span class="pill">Books Finished: <b id="booksDone">0</b></span>
          </div>
          <div class="row">
            <button id="exportData" class="ghost">Export Data (JSON)</button>
            <button id="resetLocal" class="ghost">Reset Local Data</button>
          </div>
        </div>

        <div class="sp"></div>
        <h3 class="title">Leaderboard</h3>
        <div class="muted small">
          Local top-10 (instant). Optional: paste Firebase config to enable
          global leaderboard sync.
        </div>
        <div class="leader" id="board"></div>

        <div class="sp"></div>
        <details class="card" style="background: #0d213b">
          <summary class="title">
            Firebase (optional for global leaderboard)
          </summary>
          <div
            style="display: flex; flex-wrap: wrap; gap: 8px; margin-top: 8px"
          >
            <input
              id="fb_apiKey"
              placeholder="apiKey"
              style="flex: 1 1 220px"
            />
            <input
              id="fb_authDomain"
              placeholder="authDomain"
              style="flex: 1 1 220px"
            />
            <input
              id="fb_projectId"
              placeholder="projectId"
              style="flex: 1 1 220px"
            />
            <input
              id="fb_storageBucket"
              placeholder="storageBucket"
              style="flex: 1 1 220px"
            />
            <input
              id="fb_messagingSenderId"
              placeholder="messagingSenderId"
              style="flex: 1 1 220px"
            />
            <input id="fb_appId" placeholder="appId" style="flex: 1 1 220px" />
          </div>
          <div class="sp"></div>
          <div class="row">
            <button class="pri" id="enableGlobal">
              Enable Global Leaderboard
            </button>
            <span id="fbStatus" class="muted" style="margin-left: 8px"></span>
          </div>
        </details>
      </section>
    </div>

    <footer>
      Built for INSPIRE–MANAK demo: public domain books only. Points awarded for
      in-site reading (95% read).
    </footer>

    <script>
      /* ----------------- State & Persistence ----------------- */
      const LS_KEY = "fictionxp_v3";
      let state = JSON.parse(localStorage.getItem(LS_KEY) || "{}");
      if (!state.user) {
        state.user = {
          name: "Reader",
          totalPoints: 0,
          finished: {},
          finishedCount: 0,
        };
      }
      if (!state.progress) {
        state.progress = {};
      } // bookId -> { pct, awarded, words, points, title, author }
      if (!state.leader) state.leader = []; // local leaderboard array of {name, points, books}
      saveState();

      function saveState() {
        localStorage.setItem(LS_KEY, JSON.stringify(state));
      }

      /* ----------------- DOM refs ----------------- */
      const elUser = document.getElementById("username");
      const elSaveUser = document.getElementById("saveUser");
      const elQ = document.getElementById("q");
      const elSearch = document.getElementById("search");
      const elPopular = document.getElementById("popular");
      const elLib = document.getElementById("library");
      const elReader = document.getElementById("reader");
      const elProg = document.getElementById("progPct");
      const elBookPts = document.getElementById("bookPts");
      const elTotalPts = document.getElementById("totalPts");
      const elBooksDone = document.getElementById("booksDone");
      const elBookMeta = document.getElementById("bookMeta");
      const elReset = document.getElementById("resetLocal");
      const elBoard = document.getElementById("board");
      const elExport = document.getElementById("exportData");
      const elEnable = document.getElementById("enableGlobal");
      const elFbStatus = document.getElementById("fbStatus");

      /* ----------------- Initial UI ----------------- */
      elUser.value = state.user.name || "Reader";
      renderUserStats();
      renderBoard();

      /* ----------------- Gutendex API helpers ----------------- */
      /* Gutendex search: https://gutendex.com/books/?topic=fiction or ?search= */
      async function gutendexSearch(q = "", page = 1) {
        const qPart = q ? `&search=${encodeURIComponent(q)}` : "";
        const url = `https://gutendex.com/books/?topic=fiction${qPart}&page=${page}`;
        const res = await fetch(url);
        if (!res.ok) throw new Error("search failed");
        return res.json();
      }

      /* ----------------- Library UI & events ----------------- */
      elSearch.onclick = async () => {
        const q = elQ.value.trim();
        renderLibMessage("Searching…");
        try {
          const data = await gutendexSearch(q);
          renderLibrary(data.results);
        } catch (e) {
          renderLibMessage("Search failed. Try again.");
          console.error(e);
        }
      };
      elPopular.onclick = async () => {
        renderLibMessage("Loading popular…");
        try {
          const data = await gutendexSearch("");
          renderLibrary(data.results);
        } catch (e) {
          renderLibMessage("Failed to load popular list.");
          console.error(e);
        }
      };
      elPopular.click();

      function renderLibMessage(msg) {
        elLib.innerHTML = `<div class="muted">${msg}</div>`;
      }

      function renderLibrary(items) {
        if (!items || !items.length) {
          renderLibMessage("No results.");
          return;
        }
        elLib.innerHTML = "";
        items.forEach((b) => {
          const fmts = b.formats || {};
          // Prefer plain text or HTML readable formats:
          const textUrl =
            fmts["text/plain; charset=utf-8"] ||
            fmts["text/plain"] ||
            fmts["text/html; charset=utf-8"] ||
            fmts["text/html"];
          if (!textUrl) return; // skip if no readable format
          const cover = fmts["image/jpeg"] || fmts["image/png"] || "";
          const wrap = document.createElement("div");
          wrap.className = "book";
          wrap.innerHTML = `
      <img src="${cover}" alt="cover" onerror="this.style.visibility='hidden'">
      <div class="grow">
        <div style="font-weight:600">${escapeHtml(b.title)}</div>
        <div class="muted small">${escapeHtml(
          b.authors?.[0]?.name || "Unknown"
        )} • #${b.id}</div>
        <div class="row" style="margin-top:8px;flex-wrap:wrap;gap:8px">
          <span class="pill cap">${b.languages?.[0] || "en"}</span>
          <span class="pill">Downloads: ${b.download_count ?? 0}</span>
        </div>
      </div>
      <div>
        <button class="pri" data-url="${encodeURIComponent(
          textUrl
        )}" data-id="${b.id}" data-title="${encodeURIComponent(
            b.title
          )}" data-author="${encodeURIComponent(
            b.authors?.[0]?.name || "Unknown"
          )}">Read</button>
      </div>
    `;
          const btn = wrap.querySelector("button");
          btn.onclick = () =>
            loadBook({
              id: String(b.id),
              title: decodeURIComponent(btn.dataset.title),
              author: decodeURIComponent(btn.dataset.author),
              url: decodeURIComponent(btn.dataset.url),
            });
          elLib.appendChild(wrap);
        });
      }

      /* ----------------- Reader, progress & awarding ----------------- */

      let currentBook = null;
      let lastAwardToast = null;

      async function loadBook(meta) {
        // meta: {id, title, author, url}
        currentBook = meta;
        elBookMeta.innerHTML = `
    <span class="badge">Now reading</span>
    <span class="pill" style="margin-left:8px"><b>${escapeHtml(
      meta.title
    )}</b> — ${escapeHtml(meta.author)}</span>
    <a class="link small" href="${
      meta.url
    }" target="_blank" rel="noopener" style="margin-left:10px">open raw</a>
  `;
        elProg.textContent = "0";
        elBookPts.textContent = "0";
        elReader.innerHTML = `<p class="muted">Loading book…</p>`;
        ensureProgress(meta.id);
        try {
          // Try direct fetch first
          let txt = await tryFetchText(meta.url);
          if (!txt || txt.length < 200) {
            // Fallback: attempt proxy fetch via jina.ai (helps with CORS)
            txt = await tryFetchText(
              `https://r.jina.ai/http://${stripProtocol(meta.url)}`
            );
          }
          if (!txt || txt.length < 200) throw new Error("No readable content");

          const clean = normalizeText(txt);
          const words = clean.split(/\s+/).filter(Boolean).length;
          const points = Math.max(1, Math.floor(words / 1000)); // 1 pt / 1000 words

          state.progress[meta.id] = state.progress[meta.id] || {};
          state.progress[meta.id].words = words;
          state.progress[meta.id].points = points;
          state.progress[meta.id].title = meta.title;
          state.progress[meta.id].author = meta.author;
          saveState();

          elBookPts.textContent = String(points);
          // Render paragraphs
          elReader.innerHTML = clean
            .split(/\n{2,}/)
            .map((p) => `<p>${escapeHtml(p)}</p>`)
            .join("");
          elReader.scrollTop = 0;

          // Update visual progress from saved progress (if any)
          const prevPct = Math.max(0, state.progress[meta.id].pct || 0);
          elProg.textContent = String(prevPct);
          maybeAward(meta.id); // in case already finished earlier

          // On scroll compute percent
          elReader.onscroll = () => {
            // avoid division by zero
            const scrollable = elReader.scrollHeight - elReader.clientHeight;
            const pct =
              scrollable <= 0
                ? 100
                : Math.min(
                    100,
                    Math.round((100 * elReader.scrollTop) / scrollable)
                  );
            elProg.textContent = String(pct);
            state.progress[meta.id].pct = Math.max(
              state.progress[meta.id].pct || 0,
              pct
            );
            saveState();
            maybeAward(meta.id);
          };
        } catch (e) {
          console.error(e);
          elReader.innerHTML = `<p class="warn">Could not load this book in your browser. Try another result. (If a CORS error appears, the app will attempt a proxy automatically.)</p>`;
        }
      }

      function ensureProgress(bookId) {
        if (!state.progress[bookId])
          state.progress[bookId] = {
            pct: 0,
            awarded: false,
            words: 0,
            points: 0,
            title: "",
            author: "",
          };
      }

      function maybeAward(bookId) {
        const p = state.progress[bookId];
        if (!p || p.awarded) return;
        if ((p.pct || 0) >= 95) {
          p.awarded = true;
          state.user.totalPoints =
            (state.user.totalPoints || 0) + (p.points || 0);
          state.user.finished = state.user.finished || {};
          state.user.finished[bookId] = true;
          state.user.finishedCount = Object.keys(state.user.finished).length;
          saveState();
          renderUserStats();
          pushLeaderboard();
          toast(`🏆 Finished "${truncate(p.title, 40)}" — +${p.points} pts`);
        }
      }

      /* ----------------- Fetch helpers with CORS fallback ----------------- */
      async function tryFetchText(url) {
        try {
          const res = await fetch(url, { mode: "cors" });
          if (!res.ok) throw new Error("fetch fail");
          const text = await res.text();
          // If response is HTML garbage or too short, caller will try fallback
          return text;
        } catch (e) {
          // try proxy using jina.ai (prefix r.jina.ai/http://)
          try {
            // If url already starts with https/http, convert to http for jina.ai's http endpoint
            const cleaned = stripProtocol(url);
            const proxy = `https://r.jina.ai/http://${cleaned}`;
            const r = await fetch(proxy);
            if (!r.ok) throw new Error("proxy fail");
            return await r.text();
          } catch (err) {
            console.warn("Both direct fetch and proxy failed for", url, err);
            return null;
          }
        }
      }
      function stripProtocol(u) {
        return u.replace(/^https?:\/\//i, "");
      }

      /* Sanitize: strip HTML tags if any, normalize whitespace, remove Gutenberg headers/footers roughly */
      function normalizeText(t) {
        // If looks like HTML, extract textContent
        if (/<\/?[a-z][\s\S]*>/i.test(t)) {
          const div = document.createElement("div");
          div.innerHTML = t;
          t = div.textContent || div.innerText || "";
        }
        // Remove common Gutenberg header/footer markers crudely
        t = t
          .replace(/\r/g, "")
          .replace(/\t/g, " ")
          .replace(/\f/g, " ")
          .replace(/^\s+|\s+$/g, "");
        // Remove Project Gutenberg header ranges
        t = t.replace(
          /(Project Gutenberg[^\n]*\n)|(End of the Project Gutenberg)/gi,
          ""
        );
        t = t.replace(/\n{3,}/g, "\n\n");
        return t.trim();
      }

      /* ----------------- Leaderboard (local + optional Firebase) ----------------- */
      function localBoard() {
        // update or insert current user
        const idx = state.leader.findIndex((x) => x.name === state.user.name);
        const entry = {
          name: state.user.name,
          points: state.user.totalPoints || 0,
          books: state.user.finishedCount || 0,
          updatedAt: new Date().toISOString(),
        };
        if (idx >= 0) {
          state.leader[idx] = entry;
        } else {
          state.leader.push(entry);
        }
        state.leader.sort((a, b) => b.points - a.points);
        state.leader = state.leader.slice(0, 10);
        saveState();
        return state.leader;
      }

      function renderBoard() {
        const rows = localBoard();
        elBoard.innerHTML = "";
        rows.forEach((r, i) => {
          const container = document.createElement("div");
          container.className = "row";
          container.innerHTML = `
      <div class="row" style="gap:8px;flex:1">
        <span class="pill">${i + 1}</span>
        <b>${escapeHtml(r.name)}</b>
        <span class="muted small">books: ${r.books || 0}</span>
      </div>
      <div class="row"><span class="pill">⭐ ${r.points} pts</span></div>
    `;
          elBoard.appendChild(container);
        });
      }

      function pushLeaderboard() {
        // local only by default
        renderBoard();
        if (window.__fbEnabled) {
          try {
            const db = firebase.firestore();
            const id =
              (state.user.name || "anon")
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, "-")
                .slice(0, 32) || "anon";
            db.collection("fictionxp_leaderboard")
              .doc(id)
              .set(
                {
                  name: state.user.name,
                  points: state.user.totalPoints || 0,
                  books: state.user.finishedCount || 0,
                  updatedAt: new Date().toISOString(),
                },
                { merge: true }
              );
          } catch (e) {
            console.warn("Firebase push failed", e);
          }
        }
      }

      /* ----------------- User controls ----------------- */
      elSaveUser.onclick = () => {
        const name = (elUser.value || "").trim() || "Reader";
        state.user.name = name;
        saveState();
        pushLeaderboard();
        renderBoard();
        toast("Saved name: " + name);
      };

      elReset.onclick = () => {
        if (!confirm("Reset ALL local data?")) return;
        localStorage.removeItem(LS_KEY);
        location.reload();
      };

      elExport.onclick = () => {
        const blob = new Blob([JSON.stringify(state, null, 2)], {
          type: "application/json",
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "fictionxp_data.json";
        a.click();
        URL.revokeObjectURL(url);
      };

      /* ----------------- Firebase enable (optional) ----------------- */
      const fbInputs = [
        "fb_apiKey",
        "fb_authDomain",
        "fb_projectId",
        "fb_storageBucket",
        "fb_messagingSenderId",
        "fb_appId",
      ].reduce((acc, id) => {
        acc[id] = document.getElementById(id);
        return acc;
      }, {});
      elEnable.onclick = () => {
        const cfg = {
          apiKey: fbInputs.fb_apiKey.value.trim(),
          authDomain: fbInputs.fb_authDomain.value.trim(),
          projectId: fbInputs.fb_projectId.value.trim(),
          storageBucket: fbInputs.fb_storageBucket.value.trim(),
          messagingSenderId: fbInputs.fb_messagingSenderId.value.trim(),
          appId: fbInputs.fb_appId.value.trim(),
        };
        if (!cfg.apiKey || !cfg.projectId || !cfg.appId) {
          elFbStatus.textContent = "Fill apiKey, projectId, appId";
          return;
        }
        try {
          firebase.initializeApp(cfg);
          window.__fbEnabled = true;
          elFbStatus.textContent = "Global leaderboard enabled ✔";
          // subscribe to top 10
          const db = firebase.firestore();
          db.collection("fictionxp_leaderboard")
            .orderBy("points", "desc")
            .limit(10)
            .onSnapshot((snap) => {
              const rows = [];
              snap.forEach((doc) => rows.push(doc.data()));
              // show global top-10
              elBoard.innerHTML = "";
              rows.forEach((r, i) => {
                const container = document.createElement("div");
                container.className = "row";
                container.innerHTML = `
            <div class="row" style="gap:8px;flex:1">
              <span class="pill">${i + 1}</span>
              <b>${escapeHtml(r.name || "—")}</b>
              <span class="muted small">books: ${r.books || 0}</span>
            </div>
            <div class="row"><span class="pill">⭐ ${
              r.points || 0
            } pts</span></div>
          `;
                elBoard.appendChild(container);
              });
            });
          // push current
          pushLeaderboard();
        } catch (e) {
          console.error(e);
          elFbStatus.textContent = "Firebase init failed";
        }
      };

      /* ----------------- Utilities ----------------- */
      function escapeHtml(s) {
        return String(s).replace(
          /[&<>"']/g,
          (m) =>
            ({
              "&": "&amp;",
              "<": "&lt;",
              ">": "&gt;",
              '"': "&quot;",
              "'": "&#39;",
            }[m])
        );
      }
      function toast(msg) {
        const t = document.createElement("div");
        t.textContent = msg;
        t.style.position = "fixed";
        t.style.bottom = "18px";
        t.style.right = "18px";
        t.style.background = "#071630";
        t.style.border = "1px solid rgba(255,255,255,0.03)";
        t.style.padding = "10px 14px";
        t.style.borderRadius = "10px";
        t.style.zIndex = 99;
        t.style.color = "#e8f4ff";
        document.body.appendChild(t);
        setTimeout(() => t.remove(), 3000);
      }
      function truncate(s, n) {
        return s && s.length > n ? s.slice(0, n - 1) + "…" : s;
      }

      /* ----------------- Accessibility tiny helpers ----------------- */
      // update user stats in UI
      function renderUserStats() {
        elTotalPts.textContent = String(state.user.totalPoints || 0);
        elBooksDone.textContent = String(state.user.finishedCount || 0);
      }

      /* ----------------- Helpful note on CORS & proxy -----------------
Many Gutenberg raw files are hosted on servers that block cross-origin fetches.
This app:
  1) tries a direct fetch of the 'formats' URL from Gutendex
  2) if that fails or returns nothing useful, it attempts a proxy fetch using https://r.jina.ai/http://<host>/<path>
The proxy is public and meant to help demos. If you run in an environment that forbids external proxies, some books may not load directly due to CORS restrictions.
----------------------------------------------------------------*/

      /* ----------------- End of script ----------------- */
    </script>
  </body>
</html>
